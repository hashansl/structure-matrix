#df <- read.csv("Qmatrix_EP_DISABL.csv", header = TRUE)
df <- as.matrix(read.csv("Qmatrix_EP_CROWD.csv", header = TRUE))
#mat_disabl <- as.matrix(read.csv("Qmatrix_EP_DISABL.csv", header = TRUE))
#mat_limeng <- as.matrix(read.csv("Qmatrix_EP_LIMENG.csv", header = TRUE))
#mat_pci <- as.matrix(read.csv("Qmatrix_EP_PCI.csv", header = TRUE))
#mat_uninsur <- as.matrix(read.csv("Qmatrix_EP_UNINSUR.csv", header = TRUE))
mat <- as.matrix(df)
mat
marg.var <- rep(0, nrow(mat))
marg.var
Q_sparse <- inla.as.sparse(mat)
Q_sparse
g <- inla.read.graph(Q_sparse)
plot(g)
summary(g)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- Q[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
constr=list(A=matrix(1, nrow=1, ncol=12),e=0)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
constr=list(A=matrix(1, nrow=1, ncol=12),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
mean(0.2420615,0.4550647,0.25)
mean([0.2420615,0.4550647,0.25])
K = list(0.2420615,0.4550647,0.25)
K = list(0.2420615,0.4550647,0.25)
K.mean()
mean(K)
for i in K:
K = list(0.2420615,0.4550647,0.25)
sum(K)
sum(0.2420615,0.4550647,0.25)
sum(0.2420615,0.4550647,0.25)/3
library(INLA)
#df <- read.csv("Qmatrix_EP_DISABL.csv", header = TRUE)
#df <- as.matrix(read.csv("Qmatrix_EP_CROWD.csv", header = TRUE))
#mat_disabl <- as.matrix(read.csv("Qmatrix_EP_DISABL.csv", header = TRUE))
df <- as.matrix(read.csv("Qmatrix_EP_LIMENG.csv", header = TRUE))
#mat_pci <- as.matrix(read.csv("Qmatrix_EP_PCI.csv", header = TRUE))
#mat_uninsur <- as.matrix(read.csv("Qmatrix_EP_UNINSUR.csv", header = TRUE))
mat <- as.matrix(df)
mat
marg.var <- rep(0, nrow(mat))
marg.var
Q_sparse <- inla.as.sparse(mat)
Q_sparse
constr=list(A=matrix(1, nrow=1, ncol=nrow(mat)),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
g <- inla.read.graph(Q_sparse)
plot(g)
summary(g)
print(g$cc$n)
print(g$cc$nodes )
library(INLA)
#df <- read.csv("Qmatrix_EP_DISABL.csv", header = TRUE)
#df <- as.matrix(read.csv("Qmatrix_EP_CROWD.csv", header = TRUE))
#mat_disabl <- as.matrix(read.csv("Qmatrix_EP_DISABL.csv", header = TRUE))
df <- as.matrix(read.csv("Qmatrix_EP_LIMENG.csv", header = TRUE))
#mat_pci <- as.matrix(read.csv("Qmatrix_EP_PCI.csv", header = TRUE))
#mat_uninsur <- as.matrix(read.csv("Qmatrix_EP_UNINSUR.csv", header = TRUE))
mat <- as.matrix(df)
mat
marg.var <- rep(0, nrow(mat))
marg.var
Q_sparse <- inla.as.sparse(mat)
Q_sparse
constr=list(A=matrix(1, nrow=1, ncol=nrow(mat)),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
g <- inla.read.graph(Q_sparse)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
library(INLA)
#df <- read.csv("Qmatrix_EP_DISABL.csv", header = TRUE)
#df <- as.matrix(read.csv("Qmatrix_EP_CROWD.csv", header = TRUE))
#mat_disabl <- as.matrix(read.csv("Qmatrix_EP_DISABL.csv", header = TRUE))
#df <- as.matrix(read.csv("Qmatrix_EP_LIMENG.csv", header = TRUE))
#mat_pci <- as.matrix(read.csv("Qmatrix_EP_PCI.csv", header = TRUE))
df <- as.matrix(read.csv("Qmatrix_EP_UNINSUR.csv", header = TRUE))
mat <- as.matrix(df)
mat
marg.var <- rep(0, nrow(mat))
marg.var
Q_sparse <- inla.as.sparse(mat)
Q_sparse
g <- inla.read.graph(Q_sparse)
constr=list(A=matrix(1, nrow=1, ncol=nrow(mat)),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
#L <-QQ + Diagonal(n)*max(diag(QQ))*eeps
#print(QQ)
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
plot(g)
summary(g)
library(INLA)
df <- read.csv("Qmatrix_EP_DISABL.csv", header = TRUE)
mat <- as.matrix(df)
mat
marg.var <- rep(0, nrow(mat))
marg.var
Q_sparse <- inla.as.sparse(mat)
Q_sparse
g <- inla.read.graph(Q_sparse)
plot(g)
constr=list(A=matrix(1, nrow=1, ncol=nrow(mat)),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
print(res)
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
constr=list(A=matrix(1, nrow=1, ncol=nrow(mat)),e=0)
eps = sqrt(.Machine$double.eps)
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
print(QQ)
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
#print(res)
#print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
print(i)
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
print(QQ)
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
#print(res)
#print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
for (k in seq_len(g$cc$n)) {
i <- g$cc$nodes[[k]]
print(i)
n <- length(i)
QQ <- mat[i, i, drop = FALSE]
print(QQ)
if (n == 1) {
QQ[1, 1] <- 1
marg.var[i] <- 1
}
else {
cconstr <- constr
if (!is.null(constr)) {
cconstr$A <- constr$A[, i, drop = FALSE]
eeps <- eps
}
else {
eeps <- 0
}
idx.zero <- which(rowSums(abs(cconstr$A)) == 0)
if (length(idx.zero) > 0) {
cconstr$A <- cconstr$A[-idx.zero, , drop = FALSE]
cconstr$e <- cconstr$e[-idx.zero]
}
res <- inla.qinv(QQ + Diagonal(n) * max(diag(QQ)) *
eeps, constr = cconstr)
fac <- exp(mean(log(diag(res))))
#print(res)
print(fac)
QQ <- fac * QQ
marg.var[i] <- diag(res)/fac
}
}
